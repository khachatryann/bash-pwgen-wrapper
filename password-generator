#!/bin/bash

# password-generator: Generate Strong Password
 
clear
echo "
█▀█ ▄▀█ █▀ █▀ █░█░█ █▀█ █▀█ █▀▄
█▀▀ █▀█ ▄█ ▄█ ▀▄▀▄▀ █▄█ █▀▄ █▄▀

█▀▀ █▀▀ █▄░█ █▀▀ █▀█ ▄▀█ ▀█▀ █▀█ █▀█
█▄█ ██▄ █░▀█ ██▄ █▀▄ █▀█ ░█░ █▄█ █▀▄                                                                                 
"

if ! command -v pwgen &> /dev/null; then
    echo "Download pwgen to continue." >&2
    exit 1
fi

usage () {
    echo -e "\nUsage: ${0##*/} [OPTIONS]
Options:
Password Count:             Enter a number in the range 1-100
Password Length:            Enter a number in the range 1-50 
Alphabetic Characters:      Enter Y or N    
Numbers:                    Enter Y or N
Symbols:                    Enter Y or N 

NOTE: You cannot select N(no) for all, at least one must be Y(yes)."
    return
}

generating () {
    echo -e "\nGenerating Password(s)..."
    sleep 2
}

read -p $'\e[1mHow many passwords you wish to generate? [1-100] > \e[0m' count
read -p $'\e[1mEnter Password Length: [1-50] > \e[0m' length
read -p $'\e[1mUse Alphabetic Characters? [Y/N] \e[0m' alphabetic
read -p $'\e[1mUse Numbers? [Y/N] \e[0m' numbers
read -p $'\e[1mUse Symbols? [Y/N] \e[0m' symbols

alpha=0
nums=0
syms=0

if [[ $count -ge 1 && $count -le 100 && $length -ge 1 && $length -le 50 ]]; then
    case "$alphabetic" in 
        Y|y|yes)    alpha=1
                    ;;
        N|n|no)     alpha=0  
                    ;;
        *)          usage >&2
                    exit 1
                    ;;                      
    esac

    case "$numbers" in
        Y|y|yes)    nums=1
                    ;;
        N|n|no)     nums=0
                    ;;
        *)          usage >&2
                    exit 1
                    ;;
    esac

    case "$symbols" in
        Y|y|yes)    syms=1
                    ;;
        N|n|no)     syms=0
                    ;;
        *)          usage >&2
                    exit 1
                    ;;
    esac

    if (( alpha == 1 && nums == 0 && syms == 0 )); then
        generating
        pwgen -0 $length $count | sed 's/ /\n/g'
    elif (( alpha == 0 && nums == 1 && syms == 0 )); then
        generating
        pwgen -0 $length $count | tr a-zA-Z 0-9 | sed 's/ /\n/g'
    elif (( alpha == 0 && nums == 0 && syms == 1 )); then
        generating
        pwgen -0 $length  $count | tr a-zA-Z '!@#$%^&*()_+=[]|;:,.<>?/`~-' | sed 's/ /\n/g'   
    elif (( alpha == 1 && nums == 1 && syms == 0 )); then
        generating
        pwgen -n $length $count | sed 's/ /\n/g'
    elif (( alpha == 1 && nums == 0 && syms == 1 )); then
        generating
        pwgen -0 -y $length $count | sed 's/ /\n/g'
    elif (( alpha == 0 && nums == 1 && syms == 1)); then
        generating
        pwgen -n -y $length $count | tr a-zA-Z '0123456789!@#$%^&*()_+=[]|;:,.<>?/`~-' | sed 's/ /\n/g'
    elif (( alpha == 1 && nums == 1 && syms == 1 )); then
        generating
        pwgen -n -y $length $count | sed 's/ /\n/g'
    else
        usage >&2
        exit 1
    fi
else    
    usage >&2
    exit 1
fi

